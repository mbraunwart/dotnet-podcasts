name: Podcast API CICD

on:
  push:
  workflow_dispatch:

env:
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}

jobs:
  provision-acr:
    runs-on: ubuntu-latest
    outputs:
      acr_name: ${{ steps.tf_outputs.outputs.ACR_NAME }}
      acr_login_server: ${{ steps.tf_outputs.outputs.ACR_LOGIN_SERVER }}
      acr_username: ${{ steps.tf_outputs.outputs.ACR_USERNAME }}
      acr_password: ${{ steps.tf_outputs.outputs.ACR_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: terraform init -upgrade
        working-directory: ./infra/acr

      - name: Plan Terraform
        run: terraform validate; terraform plan -no-color
        working-directory: ./infra/acr

      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: ./infra/acr

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          echo "ACR_NAME=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
          echo "ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "ACR_USERNAME=$(terraform output -raw acr_username)" >> $GITHUB_OUTPUT

          password=$(terraform output -raw acr_password)
          echo "::add-mask::$password"
          encrypted_password=$(gpg --symmetric --batch --passphrase "${{ secrets.SECRETS_PASS_PHRASE }}" --output - <(echo "$password") | base64 -w0)

          echo "ACR_PASSWORD=$encrypted_password" >> $GITHUB_OUTPUT
        working-directory: ./infra/acr

      - run: echo "${{ steps.tf_outputs.outputs.ACR_PASSWORD }}"

  build-application:
    runs-on: ubuntu-latest
    needs: provision-acr
    steps:
      - name: Checkout
        uses: actions/checkout@v4     
        
      - name: Decrypt ACR Password
        run: |
          echo "${{ needs.provision-acr.outputs.acr_password }}" | base64 --decode
          password=$(gpg --decrypt --quiet --batch --passphrase "${{ secrets.SECRETS_PASS_PHRASE }}" --output - <(echo "${{ needs.provision-acr.outputs.acr_password }}") | base64 --decode)
          echo "::add-mask::$password"
          echo "acr_password=$password" >> $GITHUB_ENV

      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ needs.provision-acr.outputs.acr_login_server }}
          username: ${{ needs.provision-acr.outputs.acr_username }}
          password: ${{ env.acr_password }}     

      - uses: actions/setup-dotnet@v3

      - name: Build Podcast Updater
        run: dotnet publish -c Release -r linux-x64 /t:PublishContainer src/Services/Podcasts/Podcast.Updater.Worker/Podcast.Updater.Worker.csproj -p ContainerRegistry=${{ needs.provision-acr.outputs.acr_login_server }} -p ContainerImageTag=${{ github.sha }}

      - name: Build Podcast API
        run: dotnet publish -c Release -r linux-x64 -p ContainerRegistry=${{ needs.provision-acr.outputs.acr_login_server }} -p ContainerImageTag=${{ github.sha }} -p PublishProfile=DefaultContainer src/Services/Podcasts/Podcast.API/Podcast.API.csproj

      - name: Build Podcast Ingestion
        run: dotnet publish -c Release -r linux-x64 /t:PublishContainer src/Services/Podcasts/Podcast.Ingestion.Worker/Podcast.Ingestion.Worker.csproj -p ContainerRegistry=${{ needs.provision-acr.outputs.acr_login_server }} -p ContainerImageTag=${{ github.sha }}